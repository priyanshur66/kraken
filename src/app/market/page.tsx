'use client';import { useState, useEffect } from 'react';import { useWeb3 } from '@/lib/Web3Context';import Link from 'next/link';interface Market {  id: number;  question: string;  optionA: string;  optionB: string;  optionC: string;  optionD: string;  endTime: number;  resolved: boolean;  outcome: number;}export default function MarketListPage() {  const { account, contract, isConnected, connectWallet, isCorrectNetwork, switchNetwork } = useWeb3();  const [loading, setLoading] = useState(false);  const [markets, setMarkets] = useState<Market[]>([]);  useEffect(() => {    if (contract && isCorrectNetwork) {      loadMarkets();    }  }, [contract, isCorrectNetwork]);  const loadMarkets = async () => {    if (!contract) return;        try {      setLoading(true);      const marketCount = await contract.marketCount();      const marketPromises = [];            for (let i = 0; i < Number(marketCount); i++) {        marketPromises.push(contract.getMarketInfo(i));      }            const marketResults = await Promise.all(marketPromises);      const formattedMarkets: Market[] = marketResults.map((result, index) => ({        id: index,        question: result[0],        optionA: result[1],        optionB: result[2],        optionC: result[3],        optionD: result[4],        endTime: Number(result[5]),        outcome: Number(result[6]),        resolved: result[11],      }));            setMarkets(formattedMarkets.reverse());    } catch (error) {      console.error('Error loading markets:', error);    } finally {      setLoading(false);    }  };  const formatDate = (timestamp: number) => {    return new Date(timestamp * 1000).toLocaleString();  };  const isMarketExpired = (endTime: number) => {    return Date.now() / 1000 > endTime;  };  const isMarketActive = (market: Market) => {    return !market.resolved && !isMarketExpired(market.endTime);  };  const getMarketStatus = (market: Market) => {    if (market.resolved) {      return { text: 'Resolved', className: 'bg-gray-500/50 text-gray-200' };    } else if (isMarketExpired(market.endTime)) {      return { text: 'Expired', className: 'bg-red-500/50 text-red-200' };    } else {      return { text: 'Active', className: 'bg-green-500/50 text-green-200' };    }  };  if (!isConnected) {    return (      <div className="min-h-screen bg-black relative overflow-hidden flex items-center justify-center">        <div className="absolute inset-0 bg-gradient-to-br from-purple-900/50 via-blue-900/50 to-purple-700/50"></div>        <div className="absolute inset-0 bg-gradient-to-t from-black/40 via-transparent to-black/20"></div>        <div className="absolute top-1/4 right-1/4 w-96 h-96 bg-purple-500/30 rounded-full blur-3xl"></div>        <div className="absolute bottom-1/4 left-1/4 w-80 h-80 bg-blue-500/20 rounded-full blur-3xl"></div>                <div className="relative z-10 bg-white/10 backdrop-blur-md p-8 rounded-2xl border border-white/20">          <h1 className="text-3xl font-bold mb-4 text-white">Prediction Markets</h1>          <p className="mb-6 text-gray-300">Please connect your wallet to view and participate in markets.</p>          <button            onClick={connectWallet}            className="bg-gradient-to-r from-purple-500 to-blue-500 text-white px-6 py-3 rounded-lg hover:from-purple-600 hover:to-blue-600 transition-all font-medium"          >            Connect Wallet          </button>        </div>      </div>    );  }  if (!isCorrectNetwork) {    return (      <div className="min-h-screen bg-black relative overflow-hidden flex items-center justify-center">        <div className="absolute inset-0 bg-gradient-to-br from-purple-900/50 via-blue-900/50 to-purple-700/50"></div>        <div className="absolute inset-0 bg-gradient-to-t from-black/40 via-transparent to-black/20"></div>        <div className="absolute top-1/4 right-1/4 w-96 h-96 bg-purple-500/30 rounded-full blur-3xl"></div>        <div className="absolute bottom-1/4 left-1/4 w-80 h-80 bg-blue-500/20 rounded-full blur-3xl"></div>                <div className="relative z-10 bg-white/10 backdrop-blur-md p-8 rounded-2xl border border-white/20">          <h1 className="text-3xl font-bold mb-4 text-white">Wrong Network</h1>          <p className="mb-6 text-gray-300">Please switch to the Etherlink Testnet to access the markets.</p>          <button            onClick={switchNetwork}            className="bg-gradient-to-r from-orange-500 to-red-500 text-white px-6 py-3 rounded-lg hover:from-orange-600 hover:to-red-600 transition-all font-medium"          >            Switch Network          </button>        </div>      </div>    );  }  return (    <div className="min-h-screen bg-black relative overflow-hidden p-6">      {/* Purple gradient background */}      <div className="absolute inset-0 bg-gradient-to-br from-purple-900/50 via-blue-900/50 to-purple-700/50"></div>      <div className="absolute inset-0 bg-gradient-to-t from-black/40 via-transparent to-black/20"></div>            {/* Decorative gradient orbs */}      <div className="absolute top-1/4 right-1/4 w-96 h-96 bg-purple-500/30 rounded-full blur-3xl"></div>      <div className="absolute bottom-1/4 left-1/4 w-80 h-80 bg-blue-500/20 rounded-full blur-3xl"></div>            <div className="relative z-10 max-w-6xl mx-auto">        {/* Header */}        <div className="bg-white/10 backdrop-blur-md p-8 rounded-2xl border border-white/20 mb-8">          <h1 className="text-4xl font-bold mb-4 bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent">            Prediction Markets          </h1>          <p className="text-gray-300 mb-4">            Explore all available prediction markets. Click on any market to place your bets and view detailed information.          </p>          <div className="text-sm text-gray-400">            Connected: {account?.slice(0, 6)}...{account?.slice(-4)}          </div>        </div>        {/* Markets Grid */}        {loading ? (          <div className="flex items-center justify-center py-20">            <div className="text-white text-lg">Loading markets...</div>          </div>        ) : markets.length === 0 ? (          <div className="bg-white/10 backdrop-blur-md p-8 rounded-2xl border border-white/20 text-center">            <p className="text-gray-300 text-lg">No markets available yet.</p>          </div>        ) : (          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">            {markets.map((market) => {              const status = getMarketStatus(market);              return (                <Link                  key={market.id}                  href={`/market/${market.id}`}                  className="block group"                >                  <div className="bg-white/10 backdrop-blur-md p-6 rounded-2xl border border-white/20 hover:bg-white/20 transition-all transform hover:scale-105 h-full">                    <div className="mb-4">                      {/* Status Badge */}                      <div className="flex items-center justify-between mb-3">                        <span className={`inline-block px-3 py-1 rounded-lg text-sm font-medium ${status.className}`}>                          {status.text}                        </span>                        <span className="text-sm text-gray-400">#{market.id}</span>                      </div>                                            {/* Question */}                      <h3 className="text-lg font-semibold mb-3 text-white group-hover:text-purple-300 transition-colors line-clamp-3">                        {market.question}                      </h3>                                            {/* End Time */}                      <div className="text-sm text-gray-300 mb-4">                        Ends: {formatDate(market.endTime)}                      </div>                    </div>                    {/* Options Preview */}                    <div className="space-y-2 mb-4">                      <div className="text-xs font-medium text-gray-400 mb-2">Options:</div>                      <div className="grid grid-cols-2 gap-2 text-xs">                        <div className="p-2 bg-white/10 rounded text-gray-300 truncate">                          A: {market.optionA}                        </div>                        <div className="p-2 bg-white/10 rounded text-gray-300 truncate">                          B: {market.optionB}                        </div>                        <div className="p-2 bg-white/10 rounded text-gray-300 truncate">                          C: {market.optionC}                        </div>                        <div className="p-2 bg-white/10 rounded text-gray-300 truncate">                          D: {market.optionD}                        </div>                      </div>                    </div>                    {/* Call to Action */}                    <div className="text-center pt-4 border-t border-white/20">                      {isMarketActive(market) ? (                        <span className="text-purple-400 font-medium text-sm group-hover:text-purple-300">                          Click to Place Bet →                        </span>                      ) : (                        <span className="text-gray-400 font-medium text-sm">                          View Details →                        </span>                      )}                    </div>                  </div>                </Link>              );            })}          </div>        )}      </div>    </div>  );}